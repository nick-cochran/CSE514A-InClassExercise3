CSE514 – Fall 2024 Programming Assignment 1This assignment is to enhance your understanding of objective functions, regression models, the gradient descent algorithm for optimization, and how to communicate a data analysis problem. This assignment can be submitted as either individual work, or in pairs.Programming workA) Data pre-processingPre-process the attribute values of your data by normalizing or standardizing each variable. Keep a copy that was not pre-processed, so you can analyze the difference in optimization. B) Univariate and multivariate linear regressionIn lecture, we discuss univariate linear regression y = f(x) = mx+b, where there is only a single independent variable x, using MSE as the loss function. In practice, we typically have multi-dimensional (or multi-variate) data, i.e., the input x is a vector of features with length p. Assigning a parameter to each of these features, plus the b parameter, results in p+1 model parameters. Your code must be able to apply the gradient descent algorithm for optimizing univariate and multivariate linear regression models using the mean squared error objective function.IMPORTANT: Regression is basic, so there are many implementations available, but you MUST implement your method yourself. You may use other functions like matrix math and/or standardization (ex. NumPy or scikit-learn), but the gradient descent algorithm must be implemented by yourself.C) Regression analysisRe-fit the multi-variate model using a package that gives you p-values for each predictor variable through regression analysis. Find a pre-processing method that improves these p-values. Data to be usedWe will use the Concrete Compressive Strength dataset in the UCI repository at       https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+StrengthThere are 1030 instances in this dataset.  Use 900 instances for training and 130 instances for testing, randomly selected. This means that you should learn parameter values for your regression models using the 900 training samples, and then use the trained models to predict the 130 testing sample’s response values. Model parameters should never be updated based on the testing dataset.